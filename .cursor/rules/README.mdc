---
title: "Cursor Rules 概要"
description: "各ルールファイルの説明と適用場面、ルール適用の優先順位、user_rulesとの関係性、使用方法と更新履歴に関する情報"
tags: ["ルール概要", "ドキュメント", "ガイド", "使用方法"]
alwaysApply: false
---

# Cursor Rules 概要

## 適用タイミング

- プロジェクトに初めて参加する際
- ルールを確認したい際
- ルールを追加・更新する際

## ルールファイル一覧

### 1. vscode-extension.mdc

**VS Code 拡張機能開発のベストプラクティス**

- 拡張機能のライフサイクル管理
- コマンド登録と TreeDataProvider の実装
- VS Code API の適切な使用方法
- パフォーマンス最適化とメモリリーク防止

**適用場面**: extension.ts 編集、新しいコマンド追加、VS Code API 使用時

### 2. typescript.mdc

**TypeScript 開発ルール**

- strict モードの遵守と型安全性
- インターフェースと型エイリアスの使い分け
- async/await の適切な使用
- エラーハンドリングと null チェック

**適用場面**: 新規ファイル作成、関数・クラス実装、リファクタリング時

### 3. regex-handling.mdc

**正規表現処理に関するルール**

- 正規表現のバリデーションとサニタイズ
- パフォーマンスを考慮したパターン設計
- エラーメッセージの分かりやすさ
- テストケースの重要性

**適用場面**: 正規表現処理、ユーザー入力処理、fileSearchService.ts 編集時

### 4. project-structure.mdc

**プロジェクト構造とアーキテクチャ**

- ディレクトリ構成と責任分離
- ファイル命名規則とモジュール間依存関係
- インポート順序と型定義管理
- エラーハンドリングの統一

**適用場面**: 新規ファイル・ディレクトリ作成、モジュール追加、アーキテクチャ見直し時

## ルール適用の優先順位

1. **user_rules** - 全般的な開発ルール（言語設定、コミットメッセージ、コード規約など）
2. **.cursor/rules** - プロジェクト固有のルール（VS Code 拡張機能、TypeScript、正規表現処理など）

### ルールの関係性

- `user_rules`: 開発全般に適用される基本ルール
- `.cursor/rules`: RegexFileFinder プロジェクトに特化した詳細ルール
- 両方のルールを組み合わせて使用することで、一貫性のある高品質なコードを維持

## ルールの更新履歴

### v2.0.0 (2025-01-XX)

- プロジェクト構造ルールの更新
  - `utils/` ディレクトリの追加と説明（i18n.ts を含む）
  - ファイル名の更新（searchTreeProvider、searchCommands、searchInputViewProvider）
  - 依存関係図の更新（utils/ を含める）
  - ConfigService の詳細な実装例追加（設定変更監視、ワークスペース/グローバル設定の切り替え）
  - 国際化（i18n）機能の実装パターン追加
- VS Code 拡張機能ルールの更新
  - WebviewView の実装パターン追加
  - 新しいコマンド ID の追加（executeSearch、executeRename、undoRename、redoRename、expandAll、collapseAll）
  - TreeView の展開/折りたたみ機能の実装例
  - コマンドパレットからのメニュー統合方法
  - Logger 機能の使用パターン追加
  - 国際化（i18n）機能の初期化と使用例
  - ErrorHandler.handleAsync() の使用パターン追加
- 正規表現処理ルールの更新
  - RegexValidator クラスの詳細な実装例
  - ReDoS 攻撃防止の具体的なパターン検出方法
  - 正規表現の複雑度評価（low/medium/high）
  - ファイル名置き換えにおける正規表現の使用パターン
  - キャプチャグループと置換文字列の処理方法
  - FileRenameService の Undo/Redo 機能の詳細な実装例
- TypeScript 開発ルールの更新
  - カスタムエラークラス群の詳細な実装例（RegexError、SearchError、ConfigError、RenameError）
  - ErrorHandler クラスの統一パターン（handleAsync、handleSync メソッドを含む）
  - 複雑な型定義の管理方法（RenamePreview、RenameHistory、RenameResult など）
  - Undo/Redo パターンの型安全な実装例（詳細な実装パターンを含む）
  - Result 型パターンの詳細な使用例（FileSearchService での実装例を含む）
  - Logger 機能の使用パターン追加

### v1.0.0 (2024-12-19)

- 初回作成
- VS Code 拡張機能開発ルール
- TypeScript 開発ルール
- 正規表現処理ルール
- プロジェクト構造ルール

## 使用方法

1. **開発開始時**: README.mdc を読んで全体像を把握
2. **コーディング時**: 該当するルールファイルを参照
3. **コードレビュー時**: 全ルールファイルをチェック
4. **新機能追加時**: 関連するルールファイルを更新

## 注意事項

- ルールは絶対的なものではなく、プロジェクトの成長に合わせて更新する
- 新しいパターンやベストプラクティスが見つかった場合は、適切なルールファイルに追加する
- ルール間で矛盾が生じた場合は、プロジェクト固有のルール（.cursor/rules）を優先する
